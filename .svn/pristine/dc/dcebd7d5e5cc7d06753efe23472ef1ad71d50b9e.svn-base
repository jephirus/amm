package cn.jxust.device.service;

import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import cn.jxust.base.model.Department;
import cn.jxust.device.dao.DeviceDao;
import cn.jxust.device.model.AttachDevice;
import cn.jxust.device.model.Device;
import cn.jxust.device.model.Prober;
import cn.jxust.orm.PageData;
import cn.jxust.orm.hibernate.BaseDao;
import cn.jxust.orm.hibernate.BaseService;

@Service
@Transactional
public class DeviceService extends BaseService<Device>
{
	
	public DeviceDao getDeviceDao(){
		return (DeviceDao) baseDao;
	}

	@Override
	@Resource(name="deviceDao")
	public void setBaseDao(BaseDao<Device> baseDao)
	{
		this.baseDao = baseDao;
	}
	
	@Resource
	ProberService proberService;
	
	@Resource
	AttachDeviceService attachDeviceService;
	
	public PageData<Device> getAll(PageData<Device> pageData)
	{
		return getDeviceDao().findPage(pageData, "from Device");
	}
	
	public List<Device> findAll()
	{
		return getDeviceDao().findList("from Device");
	}
	
	public List<Device> findAll(Department department)
	{
		return getDeviceDao().findAll(department);
	}
	
	public void save(Integer proberCount, Integer attachDeviceCount, Device device)
	{
		Prober p;
		AttachDevice ad;
		if (device.getDeviceId() == null) {  // 新增对象
			getDeviceDao().save(device);   // 先保存控制器
			for (int i = 0; i < proberCount; i++) {
				p = new Prober();
				p.setProberNum(String.format("%08d", i + 1));
				p.setLocation(String.format("%08d", i + 1));
				p.setProberRange("100.0");
				p.setLowThickness("20.0");
				p.setHighThickness("50.0");
				p.setInstallDate(new Date().toString());
				p.setDevice(device);
				proberService.save(p);  // 再保存控测器
			}
			// 最后保存外控器
			for (int i = 0; i < attachDeviceCount; i++) {
				ad = new AttachDevice();
				ad.setAttachDeviceNum(String.format("%08d", i + 1)); // 外控器编号
				ad.setLocation(String.format("%08d", i + 1));
				ad.setInstallDate(new Date().toString());
				ad.setDevice(device);
				attachDeviceService.save(ad);  // 再保存控测器
			}
		}else{   // 更新对象
			for (int i = device.getProberCount(); i < device.getProberCount() + proberCount; i++) {
				p = new Prober();
				p.setProberNum(String.format("%08d", i + 1));
				p.setLocation(String.format("%08d", i + 1));
				p.setProberRange("100.0");
				p.setLowThickness("20.0");
				p.setHighThickness("50.0");
				p.setInstallDate(new Date().toString());
				p.setDevice(device);
				proberService.save(p);  // 再保存控测器
			}
			device.setProberCount(device.getProberCount() + proberCount);
			
			// 最后保存外控器
			for (int i = device.getAttachDeviceCount(); i < device.getAttachDeviceCount() + attachDeviceCount; i++) {
				ad = new AttachDevice();
				ad.setAttachDeviceNum(String.format("%08d", i + 1));
				ad.setLocation(String.format("%08d", i + 1));
				ad.setInstallDate(new Date().toString());
				ad.setDevice(device);
				device.getAttachDevices().add(ad);
				attachDeviceService.save(ad);  // 再保存控测器
			}
			device.setAttachDeviceCount(device.getAttachDeviceCount() + attachDeviceCount);

			getDeviceDao().update(device);
		}
	}

	public Device findByDeviceCode(String deviceCode) {
		
		return getDeviceDao().findByDeviceCode(deviceCode);
	}
}
